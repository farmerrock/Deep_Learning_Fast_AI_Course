{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Kaggle Planet Competition: How to land in top 4%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "%reload_ext autoreload\n",
    "%autoreload 2\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os, sys\n",
    "sys.path.append('../')\n",
    "from fastai.conv_learner import *\n",
    "from fastai.plots import *\n",
    "import planet\n",
    "from planet import f2, opt_th"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [],
   "source": [
    "path = '../data/planet/' #path to folder containing data\n",
    "sz=64   #image size\n",
    "bs=64    #batch size "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluation Criteria and Initial Model \n",
    "If you read the evaluation criteria of competition, you will know it is based on f2 score. we define metrics for model accordingly. You can find the further information about F2 score [here](https://clusteval.sdu.dk/1/clustering_quality_measures/5). \n",
    "\n",
    "For our initial model, we will be using pre-trained implementation of deep residual model renet34 which was [made public by Microsoft](https://medium.com/r/?url=https%3A%2F%2Farxiv.org%2Fpdf%2F1512.03385.pdf) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [],
   "source": [
    "metrics=[f2]\n",
    "f_model = resnet34"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  Prepare data Validation set\n",
    "label_csv = f'{path}train_v2.csv'\n",
    "n = len(list(open(label_csv)))-1 #total number of images\n",
    "val_idxs = get_cv_idxs(n) #it will return 20% indexes from training data set to used for val data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_data(sz, bs):\n",
    "    \"\"\"Returns data generator\"\"\"\n",
    "    tfms =  tfms_from_model(f_model, sz, aug_tfms=transforms_top_down, max_zoom=1.05)\n",
    "    return ImageClassifierData.from_csv(path, 'train-jpg', f'{path}train_v2.csv', bs, tfms, suffix='.jpg', val_idxs=val_idxs, test_name='test-jpg')\n",
    "data = get_data(bs, sz)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [],
   "source": [
    "learn = ConvLearner.pretrained(f_model, data, metrics=metrics) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Finding the Learning Rate\n",
    "Learning rate(LR) is one of the most important hyper parameter of your model. It determines how fast or slow your model will learn.If LR is too high, model will try to learn too fast and loss function will not converge. If LR is very too low you model will take too long to converge.\n",
    "\n",
    "Finding a good learning rate using fastai library is very easy, just use the  following two commands. They will plot a graph of LR against loss function, a good value for LR will be where the slop of the loss function is highest. As we can see slope is highest between *0.1 to 1*, you can use any value in between this range. It would be a good idea to experiment with a few values in this range to find the optimal value.After experimenting with three values, 0.2 seemed to work best for me."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f79e1615d95c4db79a40babf532f5c3d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=1), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  0%|          | 1/506 [00:00<06:47,  1.24it/s, loss=0.853]  \n",
      "  1%|          | 3/506 [00:00<02:47,  3.01it/s, loss=0.839]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.22186  0.31918  0.80651]                        \n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f15f5cf59b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrf = mdl.lr_find()\n",
    "mdl.sched.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Training the model "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Total size of chips in competition is 256X256, we start training our model with 64x64 and will gradually increase the size of image as training progress. This is a very good technique to avoid our fitting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "08fbd8b8e0594688ad2d11deb6320daa",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=7), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.1415   0.13351  0.88145]                        \n",
      "[ 1.       0.1429   0.1284   0.88529]                        \n",
      "[ 2.       0.13353  0.12606  0.89027]                        \n",
      "[ 3.       0.13395  0.12541  0.89018]                        \n",
      "[ 4.       0.1304   0.12389  0.8899 ]                        \n",
      "[ 5.       0.12874  0.12111  0.89422]                        \n",
      "[ 6.       0.12952  0.12238  0.89179]                        \n",
      "\n"
     ]
    }
   ],
   "source": [
    "lr=0.2\n",
    "data = get_data(64, 64) #data generator for batch size=64, image size=64x64\n",
    "learn = ConvLearner.pretrained(f_model, data, metrics=metrics)\n",
    "learn.fit(lr, 3, cycle_len=1, cycle_mult=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When training the model, fastai implements a technique called **stochastic gradient descent with restarts (SGDR)**, which trains model in cycles, where each cycle consists of one or more epochs. For each cycle, it starts with LR original value and will exponentially decrease the LR([Exponential learning rate schedule](https://towardsdatascience.com/learning-rate-schedules-and-adaptive-learning-rate-methods-for-deep-learning-2c8f433990d1)) as the training progress. Second parameter in fit denotes the total number of cycles. Total number of epochs in a cycle are controlled by 2 parameter *cycle_len* and *cycle_mult* as follows.\n",
    "\n",
    "`number of epochs in first cycle = cycle_len \n",
    " number of epochs in second cycle = number of epochs in previous(first) cycle x cycle_mult\n",
    " number of epochs in third cycle =  number of epochs in previous(second) cycle x cycle_mult`\n",
    " \n",
    " \n",
    "Here is the graph the show changes in LR for each cycle in above training.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f16e0620a90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "learn.sched.plot_lr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By default the fastai will freeze the weights of all of the layers except a few last layers and the ones that it adds to fine-tune the model for your dataset. So in above epochs, all of learning is done by those unfrozen last layers.\n",
    "Next, we will unfreeze the weights of all of the layers to get more accuracy out of our model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "975f945422c1455781f5f8885b61d9e7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=7), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.11419  0.10877  0.90685]                        \n",
      "[ 1.       0.10967  0.10414  0.91113]                        \n",
      "[ 2.       0.10298  0.09952  0.91535]                        \n",
      "[ 3.       0.10733  0.10075  0.91436]                        \n",
      "[ 4.       0.10066  0.09977  0.91328]                        \n",
      "[ 5.       0.09702  0.09785  0.91646]                         \n",
      "[ 6.       0.09365  0.09775  0.91603]                         \n",
      "\n"
     ]
    }
   ],
   "source": [
    "lrs = [lr/9, lr/3, lr]\n",
    "learn.unfreeze()\n",
    "learn.fit(lrs, 3, cycle_len=1, cycle_mult=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you have noticed, I have used an array for LR instead of a single value. If you give an array of 3 elements to fastai, it will divide the layers into 3 equal sets. For each set, it will use corresponding value from array.Since we are using a pre-trained model, and in a CNN initial set of layers usually learns simple features(like find a edge, corner, etc) so we don't want our initial layers to change too much, therefore we are using the lowest LR for them.  Higher layers in CNN learns to find complex features (like geometrical patterns,faces etc), so having a higher rate for them would be good idea so they can adopt more rapidly to our data set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f16e05e80f0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "learn.sched.plot_loss()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a756960bd4b94119a7249afaf04dc471",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=7), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.09663  0.09755  0.91627]                         \n",
      "[ 1.       0.09502  0.09557  0.91785]                         \n",
      "[ 2.       0.09251  0.09574  0.91777]                         \n",
      "[ 3.       0.09531  0.09504  0.91819]                         \n",
      "[ 4.       0.09537  0.0935   0.92074]                         \n",
      "[ 5.       0.09129  0.09462  0.9184 ]                         \n",
      "[ 6.       0.09016  0.09305  0.91991]                         \n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "dbc1ae665c8345c4a5403afc0928b7c6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=7), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.09771  0.09089  0.9234 ]                         \n",
      "[ 1.       0.09984  0.09359  0.92097]                         \n",
      "[ 2.       0.08881  0.08804  0.9251 ]                         \n",
      "[ 3.       0.09628  0.09679  0.91755]                         \n",
      "[ 4.       0.09159  0.09016  0.92407]                         \n",
      "[ 5.       0.08745  0.08681  0.92835]                         \n",
      "[ 6.       0.08303  0.0862   0.92857]                         \n",
      "\n"
     ]
    }
   ],
   "source": [
    "#train for image size128x128\n",
    "learn.set_data(get_data(128, 64))\n",
    "\n",
    "learn.freeze()\n",
    "learn.fit(lr, 3, cycle_len=1, cycle_mult=2)\n",
    "\n",
    "learn.unfreeze()\n",
    "learn.fit(lr, 3, cycle_len=1, cycle_mult=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a944884750bb4805940bf0aeae64bee4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=7), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.0892   0.09124  0.92263]                         \n",
      "[ 1.       0.09028  0.09193  0.92213]                         \n",
      "[ 2.       0.08588  0.08995  0.92386]                         \n",
      "[ 3.       0.09012  0.09022  0.92478]                         \n",
      "[ 4.       0.09102  0.09064  0.92299]                         \n",
      "[ 5.       0.08691  0.08925  0.92487]                         \n",
      "[ 6.       0.0856   0.08926  0.92479]                         \n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9687ca0c34924ba8aa8bf94f0f75bc58",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=7), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.08793  0.08575  0.92879]                         \n",
      "[ 1.       0.08913  0.08725  0.92769]                         \n",
      "[ 2.       0.08394  0.08392  0.9297 ]                         \n",
      "[ 3.       0.08719  0.08988  0.92541]                         \n",
      "[ 4.       0.08671  0.0871   0.92625]                         \n",
      "[ 5.       0.08313  0.08325  0.9305 ]                         \n",
      "[ 6.       0.07701  0.08292  0.93139]                         \n",
      "\n"
     ]
    }
   ],
   "source": [
    "#train for image size256x256\n",
    "learn.set_data(get_data(256, 64))\n",
    "\n",
    "learn.freeze()\n",
    "learn.fit(lr, 3, cycle_len=1, cycle_mult=2)\n",
    "\n",
    "learn.unfreeze()\n",
    "learn.fit(lr, 3, cycle_len=1, cycle_mult=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f16d575b400>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "learn.sched.plot_loss()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "fastai has another very good feature called Test Time Augmentation (TTA). The dea is simple; apply simple augmentation on each test image to generate five copies  of it,  and then do the prediction for each copy. You can average these prediction to get a significant(1-2%) decrease in error.\n",
    " \n",
    "So we have trained our first model, let's see how well it performs on validation set using TTA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F2 Score without TTA:0.9281136719526527,   and with TTA:0.9307022849638835\n"
     ]
    }
   ],
   "source": [
    "probs = learn.predict() #returns prediction without TTA\n",
    "f2_without_TTA =f2(probs, data.val_y)\n",
    "probs,y = learn.TTA()\n",
    "probs = np.mean(probs, axis=0)\n",
    "f2_with_TTA = f2(probs, y)\n",
    "print(f\"F2 Score without TTA:{f2_without_TTA},   and with TTA:{f2_with_TTA}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F2 score without TTA:0.9281136719526527\n"
     ]
    }
   ],
   "source": [
    "dd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "learn.save('resnet34.weights.1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "learn.load('resnet34.weights.1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "## do more data augmentation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preparing our first submission"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In our submission file, we need to place predicted labels against each image. Each image can belong to more than one class.\n",
    "\n",
    "`file_10770,agriculture clear cultivation primary road\n",
    "test_26732,agriculture clear cultivation haze primary`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you look at an example of predictions from our validation set, you will see our original labels are in the form of 1's, 0's, but our predictions are floating point numbers. So, we need to pick a threshold for our predicts to be included in submission files (0.66 for below example). `op_th` function tries multiple threshold in a given range and returns the one which maximizes the F2 score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.66928  0.0029   0.02886  0.0015   0.0011   0.99902  0.00014  0.00053  0.24234  0.02605  0.00069  0.00026\n",
      "  0.99906  0.22009  0.00423  0.00496  0.80653]\n",
      "[ 1.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  1.]\n"
     ]
    }
   ],
   "source": [
    "print(probs[0])\n",
    "print(y[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.17\n"
     ]
    }
   ],
   "source": [
    "threshold = opt_th(probs, y)\n",
    "print(threshold)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 28min 6s, sys: 4min 22s, total: 32min 28s\n",
      "Wall time: 5min 32s\n"
     ]
    }
   ],
   "source": [
    "%time test_preds, _ = learn.TTA(is_test=True)\n",
    "preds = np.mean(test_preds, axis=0)\n",
    "classes = np.array(data.classes)\n",
    "res = np.array([\" \".join(classes[(np.where(pp>threshold))]) for pp in preds])\n",
    "filenames = np.array([os.path.basename(fn).split('.')[0] for fn in data.test_ds.fnames])\n",
    "frame=pd.DataFrame(res, index=filenames, columns=['tags'])\n",
    "frame.to_csv(f'{path}planet_amazon_restnet34_submission1.csv', index_label='image_name')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ensembling\n",
    "Instead of training one model, we will be training multiple models and then averaging their prediction. This techniques is always employed to get more accuracy on data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_ensumble(nmodels):\n",
    "    models = list()\n",
    "    \n",
    "    for i in range(nmodels):\n",
    "        print(f'-----Training model: {i+1}--------')\n",
    "        val_idx = get_cv_idxs(n, val_pct=0.1, seed=12345) #use 10% of train data as val data\n",
    "        \n",
    "        data = get_data_ens(64, i, val_idx)\n",
    "        learn = ConvLearner.pretrained(f_model, data, metrics=metrics)\n",
    "        print('training for 64x64')\n",
    "        learn.fit(lr, 2, cycle_len=1, cycle_mult=2)\n",
    "        learn.unfreeze()\n",
    "        learn.fit(lrs, 2, cycle_len=1, cycle_mult=2)\n",
    "        \n",
    "        print('training for 128x128')\n",
    "        learn.set_data(get_data_ens(128, i, val_idx))\n",
    "        learn.freeze()\n",
    "        learn.fit(lr, 2, cycle_len=1, cycle_mult=2)\n",
    "        learn.unfreeze()\n",
    "        learn.fit(lrs, 2, cycle_len=1, cycle_mult=2)\n",
    "        \n",
    "        print('training for 256x256')\n",
    "        learn.set_data(get_data_ens(256, i, val_idx))\n",
    "        learn.freeze()\n",
    "        learn.fit(lr, 2, cycle_len=1, cycle_mult=2)\n",
    "        learn.unfreeze()\n",
    "        learn.fit(lrs, 2, cycle_len=1, cycle_mult=2)\n",
    "        \n",
    "        \n",
    "        learn.save(f'ensem_model_{i}.weights')\n",
    "        np.savez_compressed(f'{path}models/ensem_model_{i}_validx', val_idx=val_idx)\n",
    "        models.append(learn)\n",
    "        print(f'-----Training of model {i+1} complete----')\n",
    "    return models\n",
    "        \n",
    "    \n",
    "def get_data_ens(img_sz, model_index, val_idx):\n",
    "    return  ImageClassifierData.from_csv(path, 'train-jpg', f'{path}train_v2.csv', bs, get_transform(model_index, img_sz), suffix='.jpg', val_idxs=val_idx, test_name='test-jpg')\n",
    "\n",
    "    \n",
    "    \n",
    "def get_transform(index, img_sz):\n",
    "    f_model=resnet34\n",
    "    index = (index%5)\n",
    "    print(f'get_transform--{index}: {img_sz}')\n",
    "    tfms = [\n",
    "        tfms_from_model(f_model, img_sz, aug_tfms=transforms_basic, max_zoom=1.05),\n",
    "        tfms_from_model(f_model, img_sz, aug_tfms=transforms_side_on, max_zoom=1.05),\n",
    "        tfms_from_model(f_model, img_sz, aug_tfms=transforms_top_down, max_zoom=1.05),\n",
    "        tfms_from_model(f_model, img_sz, aug_tfms=transforms_top_down, max_zoom=1.1),\n",
    "        tfms_from_model(f_model, img_sz, aug_tfms=transforms_top_down, max_zoom=1.05, crop_type=CropType.RANDOM)]\n",
    "    return tfms[index]\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-----Training model: 1--------\n",
      "get_transform--0: 64\n",
      "training for 64x64\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3a00d7ff8e4a48aa9c2834e4d0f6770b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.14123  0.12738  0.88686]                        \n",
      "[ 1.       0.13894  0.12215  0.8923 ]                        \n",
      "[ 2.       0.1381   0.12148  0.89214]                        \n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2512996a3b26446aa72d0ae122bcabdf",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.11582  0.10072  0.91347]                        \n",
      "[ 1.       0.10864  0.09727  0.91645]                        \n",
      "[ 2.       0.09857  0.09492  0.91977]                         \n",
      "\n",
      "training for 128x128\n",
      "get_transform--0: 128\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "db51cc3bf4db4c6a9d61b22a72ad5df3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.09799  0.09317  0.92097]                         \n",
      "[ 1.       0.09873  0.09252  0.92171]                         \n",
      "[ 2.       0.09702  0.09266  0.92083]                         \n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "771d4de3bb4546039adebf8fcaf15d76",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.0919   0.08672  0.9265 ]                         \n",
      "[ 1.       0.0922   0.08715  0.92625]                         \n",
      "[ 2.       0.08603  0.08466  0.93129]                         \n",
      "\n",
      "training for 256x256\n",
      "get_transform--0: 256\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e704caddc2814b8c8f6b7937a15f634c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.0918   0.08919  0.92322]                         \n",
      "[ 1.       0.09305  0.08912  0.92321]                         \n",
      "[ 2.       0.09095  0.08861  0.92276]                         \n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "641bf236752b492fab82b6d74fea071c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=7), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.08818  0.08304  0.93024]                         \n",
      "[ 1.       0.08729  0.08223  0.93113]                         \n",
      "[ 2.       0.08028  0.08189  0.93266]                         \n",
      "[ 3.       0.08555  0.08365  0.93219]                         \n",
      "[ 4.       0.07971  0.08482  0.92951]                         \n",
      "[ 5.       0.06909  0.08532  0.92912]                         \n",
      "[ 6.       0.06364  0.08631  0.9299 ]                         \n",
      "\n",
      "-----Training of model 1 complete----\n",
      "-----Training model: 2--------\n",
      "get_transform--1: 64\n",
      "training for 64x64\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ef2c3f0264a4411aa9640a90062858d8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.14316  0.1278   0.88611]                        \n",
      "[ 1.       0.13433  0.1223   0.89097]                        \n",
      "[ 2.       0.13126  0.12012  0.89369]                        \n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ca8b1030e01c4445a85ea08ef970d8e0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.11266  0.10309  0.91136]                        \n",
      "[ 1.       0.11255  0.10161  0.90974]                        \n",
      "[ 2.       0.0976   0.09663  0.91787]                         \n",
      "\n",
      "training for 128x128\n",
      "get_transform--1: 128\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "32505b38a16240988e330346e8557b37",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.09929  0.09301  0.92042]                         \n",
      "[ 1.       0.09584  0.09294  0.9198 ]                         \n",
      "[ 2.       0.0954   0.09085  0.92148]                         \n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6667e292c4374c09ad451b7866761636",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.09932  0.08745  0.92374]                         \n",
      "[ 1.       0.09652  0.08676  0.92632]                         \n",
      "[ 2.       0.08692  0.08384  0.92958]                         \n",
      "\n",
      "training for 256x256\n",
      "get_transform--1: 256\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d68fea52011d460d98701c1cd674deb7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.09358  0.08915  0.9244 ]                         \n",
      "[ 1.       0.0909   0.08936  0.92324]                         \n",
      "[ 2.       0.08913  0.08796  0.92431]                         \n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "fad60166ace14e6ab735268a14add46b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=7), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.08721  0.08325  0.93174]                         \n",
      "[ 1.       0.08736  0.08372  0.93143]                         \n",
      "[ 2.       0.08593  0.08274  0.93225]                         \n",
      "[ 3.       0.089    0.08457  0.92996]                         \n",
      "[ 4.       0.08453  0.08174  0.93388]                         \n",
      "[ 5.       0.07834  0.08137  0.93278]                         \n",
      "[ 6.       0.07477  0.0819   0.93276]                         \n",
      "\n",
      "-----Training of model 2 complete----\n",
      "-----Training model: 3--------\n",
      "get_transform--2: 64\n",
      "training for 64x64\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3384e134fe1e4c67a012e2c67f185c13",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.14779  0.12715  0.88653]                        \n",
      "[ 1.       0.1363   0.12225  0.89201]                        \n",
      "[ 2.       0.13544  0.12007  0.89482]                        \n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b2da4c82c1414d51a22398c29226a77b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.11512  0.10323  0.91386]                        \n",
      "[ 1.       0.11114  0.09822  0.91826]                        \n",
      "[ 2.       0.10218  0.09828  0.91502]                         \n",
      "\n",
      "training for 128x128\n",
      "get_transform--2: 128\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "63e5bb97f75240a3aa39c2f50d74d1dc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.09935  0.09328  0.91971]                         \n",
      "[ 1.       0.09829  0.09256  0.92117]                         \n",
      "[ 2.       0.09828  0.09201  0.92158]                         \n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d9c696d77bb94ff38d9c7707aabdfbc7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.09707  0.08829  0.92372]                         \n",
      "[ 1.       0.09709  0.08605  0.92876]                         \n",
      "[ 2.       0.09223  0.08488  0.92664]                         \n",
      "\n",
      "training for 256x256\n",
      "get_transform--2: 256\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ab42b3a5d2ae4f759a3a85e56c1489e2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.09218  0.0888   0.92372]                         \n",
      "[ 1.       0.09462  0.08829  0.92334]                         \n",
      "[ 2.       0.09737  0.08805  0.92562]                         \n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "903e5444d9fd41c88cda78d7d14d2f3d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=7), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.09219  0.08388  0.92673]                         \n",
      "[ 1.       0.08893  0.08144  0.93248]                         \n",
      "[ 2.       0.08512  0.08088  0.93208]                         \n",
      "[ 3.       0.08873  0.08169  0.93299]                         \n",
      "[ 4.       0.08617  0.08259  0.9282 ]                         \n",
      "[ 5.       0.08163  0.07919  0.93539]                         \n",
      "[ 6.       0.08074  0.07921  0.93532]                         \n",
      "\n",
      "-----Training of model 3 complete----\n",
      "-----Training model: 4--------\n",
      "get_transform--3: 64\n",
      "training for 64x64\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8c7cf83d9ba7442fae78320d62bb3095",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.14447  0.12849  0.88602]                        \n",
      "[ 1.       0.1389   0.1233   0.89142]                        \n",
      "[ 2.       0.13561  0.12112  0.89248]                        \n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "83cbf8868266445aa003745c8aa09efd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.11718  0.10237  0.91336]                        \n",
      "[ 1.       0.113    0.09816  0.91557]                        \n",
      "[ 2.       0.10239  0.09434  0.91988]                        \n",
      "\n",
      "training for 128x128\n",
      "get_transform--3: 128\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bc6fe1a26f7a438f8893748f38462c4c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.10027  0.09285  0.91857]                         \n",
      "[ 1.       0.10043  0.09141  0.92097]                         \n",
      "[ 2.       0.09898  0.09158  0.92012]                         \n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f02b2ad71d3b4729a687e456eeb3e21b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.097    0.08551  0.92739]                         \n",
      "[ 1.       0.09587  0.08664  0.92863]                         \n",
      "[ 2.       0.09133  0.08428  0.92836]                         \n",
      "\n",
      "training for 256x256\n",
      "get_transform--3: 256\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "13437be9999642a199bc1f45c597e14a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.09405  0.08936  0.92308]                         \n",
      "[ 1.       0.09401  0.08762  0.92572]                         \n",
      "[ 2.       0.09423  0.08796  0.9241 ]                         \n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "29a1cff76355433aac8355b43457c354",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=7), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.09043  0.08248  0.93041]                         \n",
      "[ 1.       0.09122  0.08383  0.92914]                         \n",
      "[ 2.       0.0889   0.08152  0.9329 ]                         \n",
      "[ 3.       0.09007  0.08272  0.93147]                         \n",
      "[ 4.      0.0856  0.0815  0.9308]                             \n",
      "[ 5.       0.08346  0.08005  0.93289]                         \n",
      "[ 6.       0.0811   0.0795   0.93379]                         \n",
      "\n",
      "-----Training of model 4 complete----\n",
      "-----Training model: 5--------\n",
      "get_transform--4: 64\n",
      "training for 64x64\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d1cf6f5663e9444aac658d95868ba07a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.14541  0.12839  0.88706]                        \n",
      "[ 1.       0.13504  0.12284  0.88916]                        \n",
      "[ 2.       0.13081  0.11959  0.89448]                        \n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0bbe727dbb5d47afbd5f96bb7558fa60",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.1157   0.10345  0.91263]                        \n",
      "[ 1.       0.11322  0.09955  0.91581]                        \n",
      "[ 2.       0.10437  0.09441  0.91964]                        \n",
      "\n",
      "training for 128x128\n",
      "get_transform--4: 128\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3a58d80d11cd4e59a5e4c58169188750",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n",
       "<p>\n",
       "  If you're reading this message in the Jupyter Notebook or JupyterLab Notebook, it may mean\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.10273  0.09496  0.91838]                         \n",
      "[ 1.       0.09578  0.09428  0.91875]                         \n",
      "[ 2.       0.09843  0.09235  0.92164]                         \n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "182d04ed3b0749e494e6d5a5d7f1a16d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.09924  0.0881   0.92566]                         \n",
      "[ 1.       0.09617  0.08657  0.92612]                         \n",
      "[ 2.       0.09097  0.08427  0.92952]                         \n",
      "\n",
      "training for 256x256\n",
      "get_transform--4: 256\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "40e633404a23488280f93cabd8dd969d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n",
       "<p>\n",
       "  If you're reading this message in the Jupyter Notebook or JupyterLab Notebook, it may mean\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=3), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.09458  0.08918  0.92472]                         \n",
      "[ 1.       0.09248  0.08865  0.92466]                         \n",
      "[ 2.       0.09141  0.08844  0.92434]                         \n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a75979c4876e4ef88133c8770d104d39",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>HBox</code>.</p>\n"
      ],
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Epoch', max=7), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.       0.09029  0.08313  0.92911]                         \n",
      "[ 1.       0.09007  0.08329  0.92949]                         \n",
      "[ 2.       0.08437  0.08032  0.93397]                         \n",
      "[ 3.       0.09159  0.08335  0.93036]                         \n",
      "[ 4.       0.08848  0.08158  0.93119]                         \n",
      "[ 5.       0.08418  0.07971  0.9338 ]                         \n",
      "[ 6.       0.07982  0.07953  0.93427]                         \n",
      "\n",
      "-----Training of model 5 complete----\n",
      "CPU times: user 6h 6min 45s, sys: 51min 7s, total: 6h 57min 52s\n",
      "Wall time: 2h 18min 40s\n"
     ]
    }
   ],
   "source": [
    "%time ens = get_ensumble(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Preparing Submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f2 Score: 0.9285756738073999                 \n",
      "f2 Score: 0.9325735931488134                 \n",
      "f2 Score: 0.9345646226806884                 \n",
      "f2 Score: 0.9331467241762751                 \n",
      "f2 Score: 0.9349772800026489                 \n",
      "[0.17000000000000001, 0.21000000000000005, 0.20000000000000004, 0.21000000000000005, 0.21000000000000005]\n",
      "0.2\n"
     ]
    }
   ],
   "source": [
    "#Find optimized Threshold\n",
    "ens_val_probs=list()\n",
    "th_list=list()\n",
    "for mdl in ens:\n",
    "    val_probs, y=mdl.TTA()\n",
    "    val_probs=np.mean(val_probs, axis=0)\n",
    "    acc = f2(val_probs, y)\n",
    "    print (f'f2 Score: {acc}')\n",
    "    th =opt_th(val_probs, y)\n",
    "    th_list.append(th)\n",
    "    ens_val_probs.append(val_probs)\n",
    "print(th_list)   \n",
    "op_th = np.mean(th_list)\n",
    "print(op_th)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(61191, 17)"
      ]
     },
     "execution_count": 249,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Prepare test predictions\n",
    "ens_test_probs = list()\n",
    "for mdl in ens:\n",
    "    test_probs,_ = mdl.TTA(is_test=True)\n",
    "    test_probs = np.mean(test_probs, axis=0)\n",
    "    ens_test_probs.append(test_probs)\n",
    "ens_test_probs = np.array(ens_test_probs)\n",
    "ens_test_probs = np.mean(ens_test_probs, axis=0)\n",
    "ens_test_probs.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [],
   "source": [
    "#prepare the submission file\n",
    "classes = np.array(ens[0].data.classes)\n",
    "res = np.array([\" \".join(classes[(np.where(pp>op_th))]) for pp in ens_test_probs])\n",
    "filenames = np.array([os.path.basename(fn).split('.')[0] for fn in ens[0].data.test_ds.fnames])\n",
    "frame=pd.DataFrame(res, index=filenames, columns=['tags'])\n",
    "frame.to_csv(f'{path}planet_amazon_restnet34_submission_ens.csv', index_label='image_name')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A Machine Learning model for calculating threshold\n",
    "When preparing submission, we used a threshold of ~0.2 to select classes for all of test images, but ideally each test image should have a separate threshold depending on the predictions values from model. I experimented with training ML model to find the better threshold but didn’t succeed. Here is the code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.metrics import accuracy_score, mean_squared_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_optimized_threshold_list(x, y):\n",
    "    th_list = list()\n",
    "    for truth,  preds in zip(y, x):\n",
    "        steps = np.arange(0.1, 0.4, 0.01)\n",
    "        acc = np.array([accuracy_score(truth, (preds > th)) for th in steps])\n",
    "        th_list.append(steps[np.argmax(acc)])\n",
    "    return th_list\n",
    "                   \n",
    "                   \n",
    "def ml_model_threshold():\n",
    "    arr = np.load(f'{path}models/preds_probs.npz')\n",
    "    x = arr['probs']\n",
    "    y = arr['y']\n",
    "    th_list= get_optimized_threshold_list(x, y)\n",
    "    model = make_pipeline(PolynomialFeatures(2), Ridge())\n",
    "    model.fit(x, th_list)\n",
    "    print (mean_squared_error(th_list, model.predict(x)))\n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Submitting Machine Learning predicitons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.00419767227625\n"
     ]
    }
   ],
   "source": [
    "model = ml_model_threshold()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [],
   "source": [
    "classes = np.array(data.classes)\n",
    "op_th_ml = model.predict(preds)\n",
    "res = np.array([\" \".join(classes[(np.where(preds[i]>op_th_ml[i]))]) for i in range(len(preds))])\n",
    "filenames = np.array([os.path.basename(fn).split('.')[0] for fn in data.test_ds.fnames])\n",
    "frame=pd.DataFrame(res, index=filenames, columns=['tags'])\n",
    "frame.to_csv(f'{path}planet_amazon_restnet34_submission2.csv', index_label='image_name')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
